#!/bin/bash

# List of Pokémon
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# API endpoint
BASE_URL="https://pokeapi.co/api/v2/pokemon/"

# Error file
ERROR_FILE="errors.txt"

# Maximum number of concurrent processes
MAX_PARALLEL=3

# Function to fetch data for a Pokémon
fetch_pokemon_data() {
    local POKEMON=$1
    local OUTPUT_FILE="${POKEMON}.json"

    echo "Fetching data for $POKEMON..."
    HTTP_CODE=$(curl -s -o "$OUTPUT_FILE" -w "%{http_code}" "${BASE_URL}${POKEMON}")

    if [ "$HTTP_CODE" -eq 200 ]; then
        echo "Data for $POKEMON saved to $OUTPUT_FILE."
    else
        echo "Failed to fetch data for $POKEMON. HTTP Status: $HTTP_CODE" | tee -a "$ERROR_FILE"
        rm -f "$OUTPUT_FILE"  # Remove incomplete file
    fi
}

# Start background processes for each Pokémon
PIDS=()  # Array to store process IDs

for POKEMON in "${POKEMON_LIST[@]}"; do
    # Start a new fetch in the background
    fetch_pokemon_data "$POKEMON" &

    # Get the PID of the background process and store it
    PIDS+=($!)

    # Limit parallel jobs to MAX_PARALLEL
    while (( $(jobs -r | wc -l) >= MAX_PARALLEL )); do
        sleep 1  # Wait for a job to finish
    done
done

# Wait for all background processes to complete
for PID in "${PIDS[@]}"; do
    if kill -0 "$PID" 2>/dev/null; then
        wait "$PID"  # Wait for the process to finish
    fi
done

echo "All Pokémon data fetched."
